
R version 2.14.1 (2011-12-22)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(igraph)
> library(Matrix, quietly=TRUE, warn.conflicts=FALSE)
> 
> ## Are these vertices connected?
> g <- graph.tree(20)
> g[1,2]
[1] 1
> g[c(1,1,7), c(2,3,14)]
3 x 3 sparse Matrix of class "dgCMatrix"
          
[1,] 1 1 .
[2,] 1 1 .
[3,] . . 1
> g[c(1,1,7), c(5,3,12)]
3 x 3 sparse Matrix of class "dgCMatrix"
          
[1,] . 1 .
[2,] . 1 .
[3,] . . .
> g[c(1,1,1,1), c(2,3,2,2)]
4 x 4 sparse Matrix of class "dgCMatrix"
            
[1,] 1 1 1 1
[2,] 1 1 1 1
[3,] 1 1 1 1
[4,] 1 1 1 1
> g[c(8,17), c(17,8)]
2 x 2 sparse Matrix of class "dgCMatrix"
        
[1,] 1 .
[2,] . .
> 
> ## The same with symbolic names
> V(g)$name <- letters[1:vcount(g)]
> g['a','b']
[1] 1
> g[c('a','a','g'), c('b','c','n')]
3 x 3 sparse Matrix of class "dgCMatrix"
  b c n
a 1 1 .
a 1 1 .
g . . 1
> g[c('a','a','g'), c('e','c','l')]
3 x 3 sparse Matrix of class "dgCMatrix"
  e c l
a . 1 .
a . 1 .
g . . .
> g[c('a','a','a','a'), c('b','c','b','b')]
4 x 4 sparse Matrix of class "dgCMatrix"
  b c b b
a 1 1 1 1
a 1 1 1 1
a 1 1 1 1
a 1 1 1 1
> g[c('h','q'), c('q','h')]
2 x 2 sparse Matrix of class "dgCMatrix"
  q h
h 1 .
q . .
> 
> ## Logical vectors
> g[degree(g,mode="in")==0,2]
[1] 1
> g[2:3,TRUE]
2 x 20 sparse Matrix of class "dgCMatrix"
   [[ suppressing 20 column names 'a', 'b', 'c' ... ]]
                                         
b . . . 1 1 . . . . . . . . . . . . . . .
c . . . . . 1 1 . . . . . . . . . . . . .
> 
> ## Negative indices
> g[2:3,-1]
2 x 19 sparse Matrix of class "dgCMatrix"
   [[ suppressing 19 column names 'b', 'c', 'd' ... ]]
                                       
b . . 1 1 . . . . . . . . . . . . . . .
c . . . . 1 1 . . . . . . . . . . . . .
> 
> ## Weighted graphs
> el <- get.edgelist(g, names=FALSE)
> E(g)$weight <- el[,1] * el[,2]
> g[1,2]
[1] 2
> g[c(1,1,7), c(2,3,14)]
3 x 3 sparse Matrix of class "dgCMatrix"
  b c  n
a 2 3  .
a 2 3  .
g . . 98
> g[c(1,1,7), c(5,3,12)]
3 x 3 sparse Matrix of class "dgCMatrix"
  e c l
a . 3 .
a . 3 .
g . . .
> g[c(1,1,1,1), c(2,3,2,2)]
4 x 4 sparse Matrix of class "dgCMatrix"
  b c b b
a 2 3 2 2
a 2 3 2 2
a 2 3 2 2
a 2 3 2 2
> g[c(8,17), c(17,8)]
2 x 2 sparse Matrix of class "dgCMatrix"
    q h
h 136 .
q   . .
> 
> ## Weighted graph, with symbolic names
> g['a','b']
[1] 2
> g[c('a','a','g'), c('b','c','n')]
3 x 3 sparse Matrix of class "dgCMatrix"
  b c  n
a 2 3  .
a 2 3  .
g . . 98
> g[c('a','a','g'), c('e','c','l')]
3 x 3 sparse Matrix of class "dgCMatrix"
  e c l
a . 3 .
a . 3 .
g . . .
> g[c('a','a','a','a'), c('b','c','b','b')]
4 x 4 sparse Matrix of class "dgCMatrix"
  b c b b
a 2 3 2 2
a 2 3 2 2
a 2 3 2 2
a 2 3 2 2
> g[c('h','q'), c('q','h')]
2 x 2 sparse Matrix of class "dgCMatrix"
    q h
h 136 .
q   . .
> 
> ################################################################
> 
> ## Adjacent vertices
> g[[1, ]]
$a
[1] 2 3

> g[[, 2]]
$b
[1] 1

> g[[, 2, directed=FALSE]]
$b
[1] 1 4 5

> g[[2, directed=FALSE]]
$b
[1] 1 4 5

> 
> g[[1:3, ]]
$a
[1] 2 3

$b
[1] 4 5

$c
[1] 6 7

> g[[, 1:3]]
$a
numeric(0)

$b
[1] 1

$c
[1] 1

> 
> # Same with vertex names
> g[['a', ]]
$a
[1] 2 3

> g[[, 'b']]
$b
[1] 1

> g[[, 'b', directed=FALSE]]
$b
[1] 1 4 5

> g[['b', directed=FALSE]]
$b
[1] 1 4 5

> 
> g[[letters[1:3],]]
$a
[1] 2 3

$b
[1] 4 5

$c
[1] 6 7

> g[[, letters[1:3]]]
$a
numeric(0)

$b
[1] 1

$c
[1] 1

> 
> # Logical vectors
> g[[degree(g,mode="in")==0,]]
$a
[1] 2 3

> 
> # Filtering on both ends
> g[[1:10, 1:10]]
$a
[1] 2 3

$b
[1] 4 5

$c
[1] 6 7

$d
[1] 8 9

$e
[1] 10

$f
numeric(0)

$g
numeric(0)

$h
numeric(0)

$i
numeric(0)

$j
numeric(0)

> 
> ################################################################
> 
> ## Query edge ids
> g[1,2, edges=TRUE]
[1] 1
> g[c(1,1,7), c(2,3,14), edges=TRUE]
3 x 3 sparse Matrix of class "dgCMatrix"
  b c  n
a 1 2  .
a 1 2  .
g . . 13
> g[c(1,1,7), c(5,3,12), edges=TRUE]
3 x 3 sparse Matrix of class "dgCMatrix"
  e c l
a . 2 .
a . 2 .
g . . .
> g[c(1,1,1,1), c(2,3,2,2), edges=TRUE]
4 x 4 sparse Matrix of class "dgCMatrix"
  b c b b
a 1 2 1 1
a 1 2 1 1
a 1 2 1 1
a 1 2 1 1
> g[c(8,17), c(17,8), edges=TRUE]
2 x 2 sparse Matrix of class "dgCMatrix"
   q h
h 16 .
q  . .
> 
> ## The same with symbolic names
> g['a','b', edges=TRUE]
[1] 1
> g[c('a','a','g'), c('b','c','n'), edges=TRUE]
3 x 3 sparse Matrix of class "dgCMatrix"
  b c  n
a 1 2  .
a 1 2  .
g . . 13
> g[c('a','a','g'), c('e','c','l'), edges=TRUE]
3 x 3 sparse Matrix of class "dgCMatrix"
  e c l
a . 2 .
a . 2 .
g . . .
> g[c('a','a','a','a'), c('b','c','b','b'), edges=TRUE]
4 x 4 sparse Matrix of class "dgCMatrix"
  b c b b
a 1 2 1 1
a 1 2 1 1
a 1 2 1 1
a 1 2 1 1
> g[c('h','q'), c('q','h'), edges=TRUE]
2 x 2 sparse Matrix of class "dgCMatrix"
   q h
h 16 .
q  . .
> 
> ################################################################
> 
> ## Incident edges of vertices
> g[[1, , edges=TRUE]]
$a
[1] 1 2

> g[[, 2, edges=TRUE]]
$b
[1] 1

> g[[, 2, directed=FALSE, edges=TRUE]]
$b
[1] 3 4 1

> g[[2, directed=FALSE, edges=TRUE]]
$b
[1] 3 4 1

> 
> g[[1:3, , edges=TRUE]]
$a
[1] 1 2

$b
[1] 3 4

$c
[1] 5 6

> g[[, 1:3, edges=TRUE]]
$a
numeric(0)

$b
[1] 1

$c
[1] 2

> 
> # Same with vertex names
> g[['a', , edges=TRUE]]
$a
[1] 1 2

> g[[, 'b', edges=TRUE]]
$b
[1] 1

> g[[, 'b', directed=FALSE, edges=TRUE]]
$b
[1] 3 4 1

> g[['b', directed=FALSE, edges=TRUE]]
$b
[1] 3 4 1

> 
> g[[letters[1:3],, edges=TRUE]]
$a
[1] 1 2

$b
[1] 3 4

$c
[1] 5 6

> g[[, letters[1:3], edges=TRUE]]
$a
numeric(0)

$b
[1] 1

$c
[1] 2

> 
> # Filtering on both ends
> g[[1:10, 1:10, edges=TRUE]]
[[1]]
[1] 1 2

[[2]]
[1] 3 4

[[3]]
[1] 5 6

[[4]]
[1] 7 8

[[5]]
[1] 9

[[6]]
numeric(0)

[[7]]
numeric(0)

[[8]]
numeric(0)

[[9]]
numeric(0)

[[10]]
numeric(0)

> 
> #################################################################
> 
> ## from & to
> g <- graph.tree(20)
> g[from=c(1,2,2,3), to=c(3,4,8,7)]
[1] 1 1 0 1
> 
> V(g)$name <- letters[1:20]
> g[from=c("a","b","b","c"), to=c("c","d","h","g")]
[1] 1 1 0 1
> 
> E(g)$weight <- (1:ecount(g)) ^ 2 
> g[from=c("a","b","b","c"), to=c("c","d","h","g")]
[1]  4  9  0 36
> 
> g[from=c("a","b","b","c"), to=c("c","d","h","g"), edges=TRUE]
[1] 2 3 0 6
> 
