
R version 2.12.0 (2010-10-15)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(igraph)
> 
> ## Check-test
> 
> f <- function(membership, community, value, vector, multiplier, extra) {
+   M <- sapply(1:length(vector), function(x) {
+     v <- rep(0, length(vector))
+     v[x] <- 1
+     multiplier(v)
+   })
+   ev <- eigen(M)
+   ret <- 0
+   if (abs(ev$values[1] - value) > 1e-10) { ret <- 1 }
+   if (sign(ev$vectors[1,1]) != sign(vector[1])) { ev$vectors <- -ev$vectors }
+   if (any(abs(ev$vectors[,1] - vector) > 1e-10)) { ret <- 1 }
+ 
+   if (ret) { stop("Error") }
+ 
+   0
+ }
> 
> g <- graph.famous("Zachary")
> lc <- leading.eigenvector.community(g, callback=f)
> lc
Graph community structure calculated with the leading eigenvector algorithm
Number of communities (best split): 4 
Modularity (best split): 0.3934089 
Membership vector:
 [1] 1 3 3 3 1 1 1 3 2 2 1 1 3 3 2 2 1 3 2 3 2 3 2 4 4 4 2 4 4 2 2 4 2 2
> lc$modularity == modularity(g, lc$membership)
[1] TRUE
> membership(lc)
 [1] 1 3 3 3 1 1 1 3 2 2 1 1 3 3 2 2 1 3 2 3 2 3 2 4 4 4 2 4 4 2 2 4 2 2
> length(lc)
[1] 4
> sizes(lc)
Community sizes
 1  2  3  4 
 7 12  9  6 
> 
> ## Check that the modularity matrix is correct
> 
> f <- function(membership, community, value, vector, multiplier, extra) {
+   M <- sapply(1:length(vector), function(x) {
+     v <- rep(0, length(vector))
+     v[x] <- 1
+     multiplier(v)
+   })
+   myc <- membership==community
+   B <- A[myc,myc] - (deg[myc] %*% t(deg[myc]))/2/ec
+   BG <- B-diag(rowSums(B))
+   
+   if (max(abs(M-BG)) > 1e-10) { stop("Error") }
+ 
+   0
+ }
> 
> g <- graph.famous("Zachary")
> A <- get.adjacency(g, sparse=FALSE)
> ec <- ecount(g)
> deg <- degree(g)
> lc <- leading.eigenvector.community(g, callback=f)
> 
> ## Stress-test
> 
> for (i in 1:100) {
+   g <- erdos.renyi.game(20, sample(5:40, 1), type="gnm")
+   lec1 <- leading.eigenvector.community(g)
+   lec2 <- leading.eigenvector.community(g)
+   if (length(membership(lec1)) != length(membership(lec2)) ||
+       any(membership(lec1) != membership(lec2))) {
+     print("Foobar!")
+     break
+   }
+ }
> 
